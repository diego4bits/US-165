name: Test JFrog Upload Action with Environments

on: [push, workflow_dispatch]

jobs:
  test-upload:
    name: Test on ${{ matrix.env }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.env }}

    # ──► OIDC requires this permission so GitHub can mint the short-lived JWT
    permissions:
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        env: [development, qa] 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate unique data
        id: unique
        shell: bash
        run: |
          ts=$(date +%s)
          echo "timestamp=$ts"            >>"$GITHUB_OUTPUT"
          echo "version=1.0-${{ matrix.env }}.$ts" >>"$GITHUB_OUTPUT"

      - name: Create dummy POM
        id: pom
        shell: bash
        run: |
          ver=${{ steps.unique.outputs.version }}
          pom_file="$PWD/dummy-artifact-$ver.pom"
          cat >"$pom_file" <<EOF
          <project>
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.test.local</groupId>
            <artifactId>dummy-artifact</artifactId>
            <version>$ver</version>
            <packaging>jar</packaging>
          </project>
          EOF
          echo "pom_path=$pom_file" >>"$GITHUB_OUTPUT"

      - name: Create dummy JAR
        id: jar
        shell: bash
        run: |
          ver=${{ steps.unique.outputs.version }}
          jar_file="$PWD/dummy-artifact-$ver.jar"
          echo "Test content – ${{ steps.unique.outputs.timestamp }}" >content.txt
          zip "$jar_file" content.txt
          rm  content.txt
          echo "jar_path=$jar_file" >>"$GITHUB_OUTPUT"

      - name: Run JFrog upload action [${{ matrix.env }}]
        id: upload-step
        uses: ./.github/actions/upload-to-jfrog        # ← nueva versión OIDC
        with:
          jar-path:           ${{ steps.jar.outputs.jar_path }}
          pom-path:           ${{ steps.pom.outputs.pom_path }}
          repository-id:      ${{ vars.REPO_ID }}
          jfrog-url:          ${{ vars.JF_URL }}       # define como GitHub var
          oidc-provider-name: github                  # debe coincidir con la integración
          oidc-audience:      my-aud                  # opcional — elimina si no lo usas

      - name: Verify action output
        shell: bash
        run: |
          echo "Upload status: ${{ steps.upload-step.outputs.status }}"
          [[ "${{ steps.upload-step.outputs.status }}" == "success" ]] || {
            echo "::error::Upload action failed for ${{ matrix.env }}"
            exit 1
          }
