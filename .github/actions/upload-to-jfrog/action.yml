name: 'JFrog Artifact Uploader'
description: >
  Uploads a JAR and its POM to JFrog Artifactory using JFrog CLI
  authenticated through OpenID Connect (no long-lived access tokens).

# ---------- INPUTS ----------
inputs:
  jar-path:
    description: 'Absolute path to the JAR file to upload.'
    required: true

  pom-path:
    description: 'Absolute path to the POM file to upload.'
    required: true

  repository-id:
    description: 'Artifactory repository key (e.g., libs-snapshot-local).'
    required: true

  jfrog-url:
    description: 'Base URL of your JFrog Platform (e.g., https://example.jfrog.io).'
    required: true

  oidc-provider-name:
    description: 'OIDC integration name configured in the JFrog UI.'
    required: true

  oidc-audience:
    description: 'Optional audience claim for the OIDC token.'
    required: false

# ---------- OUTPUTS ----------
outputs:
  status:
    description: 'success | failed'
    value: ${{ steps.set-status.outputs.status }}

# ---------- RUNTIME ----------
runs:
  using: composite
  steps:

    # 1 路 Validar que existan los archivos
    - name: Validate JAR & POM paths
      shell: bash
      run: |
        for f in "${{ inputs.jar-path }}" "${{ inputs.pom-path }}"; do
          [[ -f "$f" ]] || { echo "::error::$f not found"; exit 1; }
        done

    # 2 路 Instalar y autenticar JFrog CLI con OIDC
    - name: Setup JFrog CLI (OIDC)
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ inputs.jfrog-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience: ${{ inputs.oidc-audience }}

    # 3 路 Subir artefactos
    - id: upload
      name: Upload artifacts
      shell: bash
      run: |
        set -euo pipefail
        jf rt upload "${{ inputs.jar-path }}" "${{ inputs.repository-id }}/"
        jf rt upload "${{ inputs.pom-path }}" "${{ inputs.repository-id }}/"

    # 4 路 Exponer el resultado
    - id: set-status
      if: always()
      shell: bash
      run: |
        [[ "${{ steps.upload.outcome }}" == "success" ]] \
          && echo "status=success" >> "$GITHUB_OUTPUT" \
          || echo "status=failed"  >> "$GITHUB_OUTPUT"
