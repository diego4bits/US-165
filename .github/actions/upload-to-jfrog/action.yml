name: 'JFrog Maven Deployer (CLI-only)'
description: >
  Uploads a JAR and its POM to Artifactory using only JFrog CLI.
  JFrog CLI fetches short-lived OIDC credentials â€“ no static tokens.

inputs:
  jar-path:         { description: 'Absolute path to the JAR', required: true }
  pom-path:         { description: 'Absolute path to the POM', required: true }
  repository-id:    { description: 'Repo key (e.g. libs-snapshot-local)', required: true }
  jfrog-url:        { description: 'https://acme.jfrog.io', required: true }
  oidc-provider-name: { description: 'OIDC integration name', required: true }
  oidc-audience:    { description: 'Optional audience claim', required: false }

runs:
  using: composite
  steps:

    - name: Validate artefacts exist
      shell: bash
      run: |
        for f in "${{ inputs.jar-path }}" "${{ inputs.pom-path }}"; do
          [[ -f "$f" ]] || { echo "::error::$f not found"; exit 1; }
        done

    - name: Setup JFrog CLI (OIDC)
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ inputs.jfrog-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience:     ${{ inputs.oidc-audience }}

    - name: Extract GAV with xmllint
      id: gav
      shell: bash
      run: |
        POM="${{ inputs.pom-path }}"
        command -v xmllint >/dev/null || { echo "::error::xmllint missing"; exit 1; }

        read -r GROUP ARTIFACT VERSION <<<"$(xmllint --xpath \
          "concat(/*[local-name()='project']/*[local-name()='groupId'\
                  |/*[local-name()='project']/*[local-name()='parent']/*[local-name()='groupId'], ' ', \
                  /*[local-name()='project']/*[local-name()='artifactId'], ' ', \
                  /*[local-name()='project']/*[local-name()='version'\
                  |/*[local-name()='project']/*[local-name()='parent']/*[local-name()='version'])" \
          "$POM")"

        [[ -z $GROUP || -z $ARTIFACT || -z $VERSION ]] && \
          { echo "::error::Cannot parse groupId/artifactId/version"; exit 1; }

        PATH_PART=${GROUP//./\/}/$ARTIFACT/$VERSION
        echo "path=$PATH_PART"        >>"$GITHUB_OUTPUT"
        echo "artifact=$ARTIFACT"     >>"$GITHUB_OUTPUT"
        echo "version=$VERSION"       >>"$GITHUB_OUTPUT"

    - name: Upload artefacts with JFrog CLI
      shell: bash
      run: |
        jf rt upload "${{ inputs.pom-path }}" \
          "${{ inputs.repository-id }}/${{ steps.gav.outputs.path }}/" --flat=true
        jf rt upload "${{ inputs.jar-path }}" \
          "${{ inputs.repository-id }}/${{ steps.gav.outputs.path }}/" --flat=true
