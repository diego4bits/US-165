name: 'JFrog Maven Deployer'
description: >
  Deploys a JAR and its POM to Artifactory with Maven CLI.
  JFrog CLI fetches short-lived OIDC credentials; no static tokens required.

# ────────── INPUTS ───────────────────────────────────────────────────────────
inputs:
  jar-path:
    description: 'Absolute path to the JAR file to deploy'
    required: true
  pom-path:
    description: 'Absolute path to the POM file'
    required: true
  repository-id:
    description: 'Artifactory repository key (e.g. libs-snapshot-local)'
    required: true
  jfrog-url:
    description: 'Base JFrog Platform URL, e.g. https://acme.jfrog.io'
    required: true
  oidc-provider-name:
    description: 'OIDC integration name configured in JFrog'
    required: true
  oidc-audience:
    description: 'Optional audience claim (leave blank if not used)'
    required: false
  java-version:
    description: 'JDK version'
    default: '17'
    required: false
  java-distribution:
    description: 'JDK distribution'
    default: 'temurin'
    required: false

# ────────── OUTPUTS ──────────────────────────────────────────────────────────
outputs:
  status:
    description: 'success | failed'
    value: ${{ steps.set-status.outputs.status }}

runs:
  using: composite
  steps:
    # 1. Verificar que los archivos existen
    - name: Validate inputs
      shell: bash
      run: |
        for f in "${{ inputs.jar-path }}" "${{ inputs.pom-path }}"; do
          [[ -f "$f" ]] || { echo "::error::$f not found"; exit 1; }
        done

    # 2. Setup JFrog CLI with OIDC
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ inputs.jfrog-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience: ${{ inputs.oidc-audience }}
    # 3. Configure Maven fro JFrog CLI
    - name: Configure Maven for JFrog CLI
      shell: bash
      run: |
        # mueve al dir del POM para que mvn-config lo detecte
        cd "$(dirname "${{ inputs.pom-path }}")"

        jf rt mvn-config \
          --server-id-deploy=setup-jfrog-cli-server \
          --server-id-resolve=setup-jfrog-cli-server \
          --repo-deploy-releases=${{ inputs.repository-id }} \
          --repo-deploy-snapshots=${{ inputs.repository-id }} \
          --repo-resolve-releases=${{ inputs.repository-id }} \
          --repo-resolve-snapshots=${{ inputs.repository-id }}



    

    - name: Deploy with Maven to Artifactory
      shell: bash
      run: |
        jf rt mvn "deploy:deploy-file" \
          -Dfile="${{ inputs.jar-path }}" \
          -DpomFile="${{ inputs.pom-path }}" \
          -DrepositoryId="${{ inputs.repository-id }}" \
          -Durl="${{ inputs.jfrog-url }}" \
          -B


