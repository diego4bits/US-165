name: 'JFrog Maven Deployer'
description: >
  Deploys a JAR and its POM to Artifactory with Maven CLI.
  JFrog CLI fetches short-lived OIDC credentials; no static tokens required.

# ────────── INPUTS ───────────────────────────────────────────────────────────
inputs:
  jar-path:
    description: 'Absolute path to the JAR file to deploy'
    required: true
  pom-path:
    description: 'Absolute path to the POM file'
    required: true
  repository-id:
    description: 'Artifactory repository key (e.g. libs-snapshot-local)'
    required: true
  jfrog-url:
    description: 'Base JFrog Platform URL, e.g. https://acme.jfrog.io'
    required: true
  oidc-provider-name:
    description: 'OIDC integration name configured in JFrog'
    required: true
  oidc-audience:
    description: 'Optional audience claim (leave blank if not used)'
    required: false
  java-version:
    description: 'JDK version'
    default: '17'
    required: false
  java-distribution:
    description: 'JDK distribution'
    default: 'temurin'
    required: false

# ────────── OUTPUTS ──────────────────────────────────────────────────────────
outputs:
  status:
    description: 'success | failed'
    value: ${{ steps.set-status.outputs.status }}

runs:
  using: composite
  steps:
    # 1. Verificar que los archivos existen
    - name: Validate inputs
      shell: bash
      run: |
        for f in "${{ inputs.jar-path }}" "${{ inputs.pom-path }}"; do
          [[ -f "$f" ]] || { echo "::error::$f not found"; exit 1; }
        done

    # 2. Setup JFrog CLI with OIDC
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ inputs.jfrog-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider-name }}
        oidc-audience: ${{ inputs.oidc-audience }}
    # 3. Configure Maven fro JFrog CLI
    - name: Generate Maven settings.xml (direct Central for plugins)
      shell: bash
      run: |
        cat > "$RUNNER_TEMP/settings.xml" <<EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0">
          <servers>
            <server>
              <id>${{ inputs.repository-id }}</id>
              <username>_token</username>
              <password>\${env.JF_ACCESS_TOKEN}</password>
            </server>
          </servers>
          <mirrors>
            <!-- 
              Mirror *everything* to artifactory-remote for dependencies,
              but plugins come from pluginRepositories below.
            -->
            <mirror>
              <id>central-mirror</id>
              <mirrorOf>*</mirrorOf>
              <url>https://trial0kfliz.jfrog.io/artifactory/remote-maven-central</url>
            </mirror>
          </mirrors>
          <pluginRepositories>
            <pluginRepository>
              <id>central</id>
              <name>Maven Central</name>
              <url>https://repo1.maven.org/maven2</url>
              <releases><enabled>true</enabled></releases>
              <snapshots><enabled>false</enabled></snapshots>
            </pluginRepository>
          </pluginRepositories>
        </settings>
        EOF

    - name: Deploy with Maven & explicit plugin repo
      shell: bash
      run: |
        mvn org.apache.maven.plugins:maven-deploy-plugin:3.1.1:deploy-file \
        -Dfile="${{ inputs.jar-path }}" \
        -DpomFile="${{ inputs.pom-path }}" \
        -DrepositoryId="${{ inputs.repository-id }}" \
        -Durl="${{ inputs.jfrog-url }}/artifactory/${{ inputs.repository-id }}" \
        -s "$RUNNER_TEMP/settings.xml"



